This patch ensures pywin32_postinstall copies files to sys.prefix and not to C:\Windows\system32\
It also comments windows registration specific code (shortcuts, COM registration, help registration...).

diff --git a/pywin32_postinstall.py b/pywin32_postinstall.py
index a2aa4b1e..030bddf8 100644
--- a/pywin32_postinstall.py
+++ b/pywin32_postinstall.py
@@ -436,7 +436,7 @@ def install(lib_dir):
         raise RuntimeError("No system files to copy!!")
     # Try the system32 directory first - if that fails due to "access denied",
     # it implies a non-admin user, and we use sys.prefix
-    for dest_dir in [get_system_dir(), sys.prefix]:
+    for dest_dir in [sys.prefix]:
         # and copy some files over there
         worked = 0
         try:
@@ -489,86 +489,86 @@ def install(lib_dir):
     for fname in glob.glob(os.path.join(pywin_dir, "*.cfg")):
         file_created(fname[:-1] + "c")  # .cfg->.cfc
 
-    # Register our demo COM objects.
-    try:
-        try:
-            RegisterCOMObjects()
-        except win32api.error as details:
-            if details.winerror != 5:  # ERROR_ACCESS_DENIED
-                raise
-            print("You do not have the permissions to install COM objects.")
-            print("The sample COM objects were not registered.")
-    except Exception:
-        print("FAILED to register the Python COM objects")
-        traceback.print_exc()
-
-    # There may be no main Python key in HKCU if, eg, an admin installed
-    # python itself.
-    winreg.CreateKey(get_root_hkey(), root_key_name)
-
-    chm_file = None
-    try:
-        chm_file = RegisterHelpFile(True, lib_dir)
-    except Exception:
-        print("Failed to register help file")
-        traceback.print_exc()
-    else:
-        if verbose:
-            print("Registered help file")
-
-    # misc other fixups.
-    fixup_dbi()
-
-    # Register Pythonwin in context menu
-    try:
-        RegisterPythonwin(True, lib_dir)
-    except Exception:
-        print("Failed to register pythonwin as editor")
-        traceback.print_exc()
-    else:
-        if verbose:
-            print("Pythonwin has been registered in context menu")
-
-    # Create the win32com\gen_py directory.
-    make_dir = os.path.join(lib_dir, "win32com", "gen_py")
-    if not os.path.isdir(make_dir):
-        if verbose:
-            print("Creating directory %s" % (make_dir,))
-        directory_created(make_dir)
-        os.mkdir(make_dir)
-
-    try:
-        # create shortcuts
-        # CSIDL_COMMON_PROGRAMS only available works on NT/2000/XP, and
-        # will fail there if the user has no admin rights.
-        fldr = get_shortcuts_folder()
-        # If the group doesn't exist, then we don't make shortcuts - its
-        # possible that this isn't a "normal" install.
-        if os.path.isdir(fldr):
-            dst = os.path.join(fldr, "PythonWin.lnk")
-            create_shortcut(
-                os.path.join(lib_dir, "Pythonwin\\Pythonwin.exe"),
-                "The Pythonwin IDE",
-                dst,
-                "",
-                sys.prefix,
-            )
-            file_created(dst)
-            if verbose:
-                print("Shortcut for Pythonwin created")
-            # And the docs.
-            if chm_file:
-                dst = os.path.join(fldr, "Python for Windows Documentation.lnk")
-                doc = "Documentation for the PyWin32 extensions"
-                create_shortcut(chm_file, doc, dst)
-                file_created(dst)
-                if verbose:
-                    print("Shortcut to documentation created")
-        else:
-            if verbose:
-                print("Can't install shortcuts - %r is not a folder" % (fldr,))
-    except Exception as details:
-        print(details)
+    # # Register our demo COM objects.
+    # try:
+    #     try:
+    #         RegisterCOMObjects()
+    #     except win32api.error as details:
+    #         if details.winerror != 5:  # ERROR_ACCESS_DENIED
+    #             raise
+    #         print("You do not have the permissions to install COM objects.")
+    #         print("The sample COM objects were not registered.")
+    # except Exception:
+    #     print("FAILED to register the Python COM objects")
+    #     traceback.print_exc()
+
+    # # There may be no main Python key in HKCU if, eg, an admin installed
+    # # python itself.
+    # winreg.CreateKey(get_root_hkey(), root_key_name)
+
+    # chm_file = None
+    # try:
+    #     chm_file = RegisterHelpFile(True, lib_dir)
+    # except Exception:
+    #     print("Failed to register help file")
+    #     traceback.print_exc()
+    # else:
+    #     if verbose:
+    #         print("Registered help file")
+
+    # # misc other fixups.
+    # fixup_dbi()
+
+    # # Register Pythonwin in context menu
+    # try:
+    #     RegisterPythonwin(True, lib_dir)
+    # except Exception:
+    #     print("Failed to register pythonwin as editor")
+    #     traceback.print_exc()
+    # else:
+    #     if verbose:
+    #         print("Pythonwin has been registered in context menu")
+
+    # # Create the win32com\gen_py directory.
+    # make_dir = os.path.join(lib_dir, "win32com", "gen_py")
+    # if not os.path.isdir(make_dir):
+    #     if verbose:
+    #         print("Creating directory %s" % (make_dir,))
+    #     directory_created(make_dir)
+    #     os.mkdir(make_dir)
+
+    # try:
+    #     # create shortcuts
+    #     # CSIDL_COMMON_PROGRAMS only available works on NT/2000/XP, and
+    #     # will fail there if the user has no admin rights.
+    #     fldr = get_shortcuts_folder()
+    #     # If the group doesn't exist, then we don't make shortcuts - its
+    #     # possible that this isn't a "normal" install.
+    #     if os.path.isdir(fldr):
+    #         dst = os.path.join(fldr, "PythonWin.lnk")
+    #         create_shortcut(
+    #             os.path.join(lib_dir, "Pythonwin\\Pythonwin.exe"),
+    #             "The Pythonwin IDE",
+    #             dst,
+    #             "",
+    #             sys.prefix,
+    #         )
+    #         file_created(dst)
+    #         if verbose:
+    #             print("Shortcut for Pythonwin created")
+    #         # And the docs.
+    #         if chm_file:
+    #             dst = os.path.join(fldr, "Python for Windows Documentation.lnk")
+    #             doc = "Documentation for the PyWin32 extensions"
+    #             create_shortcut(chm_file, doc, dst)
+    #             file_created(dst)
+    #             if verbose:
+    #                 print("Shortcut to documentation created")
+    #     else:
+    #         if verbose:
+    #             print("Can't install shortcuts - %r is not a folder" % (fldr,))
+    # except Exception as details:
+    #     print(details)
 
     # importing win32com.client ensures the gen_py dir created - not strictly
     # necessary to do now, but this makes the installation "complete"
@@ -579,14 +579,14 @@ def install(lib_dir):
         pass
     print("The pywin32 extensions were successfully installed.")
 
-    if is_bdist_wininst:
-        # Open a web page with info about the .exe installers being deprecated.
-        import webbrowser
+    # if is_bdist_wininst:
+    #     # Open a web page with info about the .exe installers being deprecated.
+    #     import webbrowser
 
-        try:
-            webbrowser.open("https://mhammond.github.io/pywin32_installers.html")
-        except webbrowser.Error:
-            print("Please visit https://mhammond.github.io/pywin32_installers.html")
+    #     try:
+    #         webbrowser.open("https://mhammond.github.io/pywin32_installers.html")
+    #     except webbrowser.Error:
+    #         print("Please visit https://mhammond.github.io/pywin32_installers.html")
 
 
 def uninstall(lib_dir):
@@ -657,7 +657,7 @@ def uninstall(lib_dir):
     # Try the system32 directory first - if that fails due to "access denied",
     # it implies a non-admin user, and we use sys.prefix
     try:
-        for dest_dir in [get_system_dir(), sys.prefix]:
+        for dest_dir in [sys.prefix]:
             # and copy some files over there
             worked = 0
             for fname in files:
