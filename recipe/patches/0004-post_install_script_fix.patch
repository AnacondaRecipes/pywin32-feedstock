This patch skips unnecessary/harmful steps from pywin32_postinstall.
(Moving dll to C:\Windows\system32\, shortcuts creation, COM registration, help registration...)

diff --git a/pywin32_postinstall.py b/pywin32_postinstall.py
index a2aa4b1e..a40edb90 100644
--- a/pywin32_postinstall.py
+++ b/pywin32_postinstall.py
@@ -403,6 +403,8 @@ def fixup_dbi():
 def install(lib_dir):
     import traceback
 
+    SKIP_ANACONDA = True
+
     # The .pth file is now installed as a regular file.
     # Create the .pth file in the site-packages dir, and use only relative paths
     # We used to write a .pth directly to sys.prefix - clobber it.
@@ -412,122 +414,127 @@ def install(lib_dir):
     # Setup the paths just in case.
     for name in "win32 win32\\lib Pythonwin".split():
         sys.path.append(os.path.join(lib_dir, name))
-    # It is possible people with old versions installed with still have
-    # pywintypes and pythoncom registered.  We no longer need this, and stale
-    # entries hurt us.
-    for name in "pythoncom pywintypes".split():
-        keyname = "Software\\Python\\PythonCore\\" + sys.winver + "\\Modules\\" + name
-        for root in winreg.HKEY_LOCAL_MACHINE, winreg.HKEY_CURRENT_USER:
-            try:
-                winreg.DeleteKey(root, keyname + "\\Debug")
-            except WindowsError:
-                pass
-            try:
-                winreg.DeleteKey(root, keyname)
-            except WindowsError:
-                pass
+
+    if not SKIP_ANACONDA:
+        # It is possible people with old versions installed with still have
+        # pywintypes and pythoncom registered.  We no longer need this, and stale
+        # entries hurt us.
+        for name in "pythoncom pywintypes".split():
+            keyname = "Software\\Python\\PythonCore\\" + sys.winver + "\\Modules\\" + name
+            for root in winreg.HKEY_LOCAL_MACHINE, winreg.HKEY_CURRENT_USER:
+                try:
+                    winreg.DeleteKey(root, keyname + "\\Debug")
+                except WindowsError:
+                    pass
+                try:
+                    winreg.DeleteKey(root, keyname)
+                except WindowsError:
+                    pass
+
     LoadSystemModule(lib_dir, "pywintypes")
     LoadSystemModule(lib_dir, "pythoncom")
     import win32api
 
-    # and now we can get the system directory:
-    files = glob.glob(os.path.join(lib_dir, "pywin32_system32\\*.*"))
-    if not files:
-        raise RuntimeError("No system files to copy!!")
-    # Try the system32 directory first - if that fails due to "access denied",
-    # it implies a non-admin user, and we use sys.prefix
-    for dest_dir in [get_system_dir(), sys.prefix]:
-        # and copy some files over there
-        worked = 0
-        try:
-            for fname in files:
-                base = os.path.basename(fname)
-                dst = os.path.join(dest_dir, base)
-                CopyTo("installing %s" % base, fname, dst)
-                if verbose:
-                    print("Copied %s to %s" % (base, dst))
-                # Register the files with the uninstaller
-                file_created(dst)
-                worked = 1
-                # Nuke any other versions that may exist - having
-                # duplicates causes major headaches.
-                bad_dest_dirs = [
-                    os.path.join(sys.prefix, "Library\\bin"),
-                    os.path.join(sys.prefix, "Lib\\site-packages\\win32"),
-                ]
-                if dest_dir != sys.prefix:
-                    bad_dest_dirs.append(sys.prefix)
-                for bad_dest_dir in bad_dest_dirs:
-                    bad_fname = os.path.join(bad_dest_dir, base)
-                    if os.path.exists(bad_fname):
-                        # let exceptions go here - delete must succeed
-                        os.unlink(bad_fname)
-            if worked:
-                break
-        except win32api.error as details:
-            if details.winerror == 5:
-                # access denied - user not admin - try sys.prefix dir,
-                # but first check that a version doesn't already exist
-                # in that place - otherwise that one will still get used!
-                if os.path.exists(dst):
-                    msg = (
-                        "The file '%s' exists, but can not be replaced "
-                        "due to insufficient permissions.  You must "
-                        "reinstall this software as an Administrator" % dst
-                    )
-                    print(msg)
-                    raise RuntimeError(msg)
-                continue
-            raise
-    else:
-        raise RuntimeError(
-            "You don't have enough permissions to install the system files"
-        )
+    if not SKIP_ANACONDA:
+        # and now we can get the system directory:
+        files = glob.glob(os.path.join(lib_dir, "pywin32_system32\\*.*"))
+        if not files:
+            raise RuntimeError("No system files to copy!!")
+        # Try the system32 directory first - if that fails due to "access denied",
+        # it implies a non-admin user, and we use sys.prefix
+        for dest_dir in [get_system_dir(), sys.prefix]:
+            # and copy some files over there
+            worked = 0
+            try:
+                for fname in files:
+                    base = os.path.basename(fname)
+                    dst = os.path.join(dest_dir, base)
+                    CopyTo("installing %s" % base, fname, dst)
+                    if verbose:
+                        print("Copied %s to %s" % (base, dst))
+                    # Register the files with the uninstaller
+                    file_created(dst)
+                    worked = 1
+                    # Nuke any other versions that may exist - having
+                    # duplicates causes major headaches.
+                    bad_dest_dirs = [
+                        os.path.join(sys.prefix, "Library\\bin"),
+                        os.path.join(sys.prefix, "Lib\\site-packages\\win32"),
+                    ]
+                    if dest_dir != sys.prefix:
+                        bad_dest_dirs.append(sys.prefix)
+                    for bad_dest_dir in bad_dest_dirs:
+                        bad_fname = os.path.join(bad_dest_dir, base)
+                        if os.path.exists(bad_fname):
+                            # let exceptions go here - delete must succeed
+                            os.unlink(bad_fname)
+                if worked:
+                    break
+            except win32api.error as details:
+                if details.winerror == 5:
+                    # access denied - user not admin - try sys.prefix dir,
+                    # but first check that a version doesn't already exist
+                    # in that place - otherwise that one will still get used!
+                    if os.path.exists(dst):
+                        msg = (
+                            "The file '%s' exists, but can not be replaced "
+                            "due to insufficient permissions.  You must "
+                            "reinstall this software as an Administrator" % dst
+                        )
+                        print(msg)
+                        raise RuntimeError(msg)
+                    continue
+                raise
+        else:
+            raise RuntimeError(
+                "You don't have enough permissions to install the system files"
+            )
 
     # Pythonwin 'compiles' config files - record them for uninstall.
     pywin_dir = os.path.join(lib_dir, "Pythonwin", "pywin")
     for fname in glob.glob(os.path.join(pywin_dir, "*.cfg")):
         file_created(fname[:-1] + "c")  # .cfg->.cfc
 
-    # Register our demo COM objects.
-    try:
+    if not SKIP_ANACONDA:
+        # Register our demo COM objects.
         try:
-            RegisterCOMObjects()
-        except win32api.error as details:
-            if details.winerror != 5:  # ERROR_ACCESS_DENIED
-                raise
-            print("You do not have the permissions to install COM objects.")
-            print("The sample COM objects were not registered.")
-    except Exception:
-        print("FAILED to register the Python COM objects")
-        traceback.print_exc()
-
-    # There may be no main Python key in HKCU if, eg, an admin installed
-    # python itself.
-    winreg.CreateKey(get_root_hkey(), root_key_name)
-
-    chm_file = None
-    try:
-        chm_file = RegisterHelpFile(True, lib_dir)
-    except Exception:
-        print("Failed to register help file")
-        traceback.print_exc()
-    else:
-        if verbose:
-            print("Registered help file")
+            try:
+                RegisterCOMObjects()
+            except win32api.error as details:
+                if details.winerror != 5:  # ERROR_ACCESS_DENIED
+                    raise
+                print("You do not have the permissions to install COM objects.")
+                print("The sample COM objects were not registered.")
+        except Exception:
+            print("FAILED to register the Python COM objects")
+            traceback.print_exc()
+
+        # There may be no main Python key in HKCU if, eg, an admin installed
+        # python itself.
+        winreg.CreateKey(get_root_hkey(), root_key_name)
+
+        chm_file = None
+        try:
+            chm_file = RegisterHelpFile(True, lib_dir)
+        except Exception:
+            print("Failed to register help file")
+            traceback.print_exc()
+        else:
+            if verbose:
+                print("Registered help file")
 
-    # misc other fixups.
-    fixup_dbi()
+        # misc other fixups.
+        fixup_dbi()
 
-    # Register Pythonwin in context menu
-    try:
-        RegisterPythonwin(True, lib_dir)
-    except Exception:
-        print("Failed to register pythonwin as editor")
-        traceback.print_exc()
-    else:
-        if verbose:
-            print("Pythonwin has been registered in context menu")
+        # Register Pythonwin in context menu
+        try:
+            RegisterPythonwin(True, lib_dir)
+        except Exception:
+            print("Failed to register pythonwin as editor")
+            traceback.print_exc()
+        else:
+            if verbose:
+                print("Pythonwin has been registered in context menu")
 
     # Create the win32com\gen_py directory.
     make_dir = os.path.join(lib_dir, "win32com", "gen_py")
@@ -537,38 +544,39 @@ def install(lib_dir):
         directory_created(make_dir)
         os.mkdir(make_dir)
 
-    try:
-        # create shortcuts
-        # CSIDL_COMMON_PROGRAMS only available works on NT/2000/XP, and
-        # will fail there if the user has no admin rights.
-        fldr = get_shortcuts_folder()
-        # If the group doesn't exist, then we don't make shortcuts - its
-        # possible that this isn't a "normal" install.
-        if os.path.isdir(fldr):
-            dst = os.path.join(fldr, "PythonWin.lnk")
-            create_shortcut(
-                os.path.join(lib_dir, "Pythonwin\\Pythonwin.exe"),
-                "The Pythonwin IDE",
-                dst,
-                "",
-                sys.prefix,
-            )
-            file_created(dst)
-            if verbose:
-                print("Shortcut for Pythonwin created")
-            # And the docs.
-            if chm_file:
-                dst = os.path.join(fldr, "Python for Windows Documentation.lnk")
-                doc = "Documentation for the PyWin32 extensions"
-                create_shortcut(chm_file, doc, dst)
+    if not SKIP_ANACONDA:
+        try:
+            # create shortcuts
+            # CSIDL_COMMON_PROGRAMS only available works on NT/2000/XP, and
+            # will fail there if the user has no admin rights.
+            fldr = get_shortcuts_folder()
+            # If the group doesn't exist, then we don't make shortcuts - its
+            # possible that this isn't a "normal" install.
+            if os.path.isdir(fldr):
+                dst = os.path.join(fldr, "PythonWin.lnk")
+                create_shortcut(
+                    os.path.join(lib_dir, "Pythonwin\\Pythonwin.exe"),
+                    "The Pythonwin IDE",
+                    dst,
+                    "",
+                    sys.prefix,
+                )
                 file_created(dst)
                 if verbose:
-                    print("Shortcut to documentation created")
-        else:
-            if verbose:
-                print("Can't install shortcuts - %r is not a folder" % (fldr,))
-    except Exception as details:
-        print(details)
+                    print("Shortcut for Pythonwin created")
+                # And the docs.
+                if chm_file:
+                    dst = os.path.join(fldr, "Python for Windows Documentation.lnk")
+                    doc = "Documentation for the PyWin32 extensions"
+                    create_shortcut(chm_file, doc, dst)
+                    file_created(dst)
+                    if verbose:
+                        print("Shortcut to documentation created")
+            else:
+                if verbose:
+                    print("Can't install shortcuts - %r is not a folder" % (fldr,))
+        except Exception as details:
+            print(details)
 
     # importing win32com.client ensures the gen_py dir created - not strictly
     # necessary to do now, but this makes the installation "complete"
@@ -579,14 +587,15 @@ def install(lib_dir):
         pass
     print("The pywin32 extensions were successfully installed.")
 
-    if is_bdist_wininst:
-        # Open a web page with info about the .exe installers being deprecated.
-        import webbrowser
+    if not SKIP_ANACONDA:
+        if is_bdist_wininst:
+            # Open a web page with info about the .exe installers being deprecated.
+            import webbrowser
 
-        try:
-            webbrowser.open("https://mhammond.github.io/pywin32_installers.html")
-        except webbrowser.Error:
-            print("Please visit https://mhammond.github.io/pywin32_installers.html")
+            try:
+                webbrowser.open("https://mhammond.github.io/pywin32_installers.html")
+            except webbrowser.Error:
+                print("Please visit https://mhammond.github.io/pywin32_installers.html")
 
 
 def uninstall(lib_dir):
